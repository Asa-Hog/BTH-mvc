{% extends "base.html.twig" %}

{% block title %} Metrics {% endblock %}

{% block content %} 

<h1>Metrics</h1>

<h2>Introduktion</h2>
<p>Man brukar prata om fyra C:n och hur de är kopplade till kodkvalitet. C:na står för </p>

<ul class = "list">
    <li>Coverage</li>
    <li>Complexity</li>
    <li>Cohesion</li>
    <li>Coupling</li>
</ul>

<span style="font-weight: bolder"></span>
<p>Coverage, eller kodtäckning, är den del av koden som är täckt av enhetstester. Om en stor del av koden är täckt av enhetstester så bör den också vara av hög kvalitet, eftersom tester har gjorts för att kontrollera att koden beter sig som tänkt, och eventuella fel som smugit sig in har blivit åtgärdade. Här pratar man om procenttal, från 0-100% av kodens rader, metoder eller klasser. Ju högre procenttal kod som är testad desto bättre.</p>

<p>Complexity, kodkomplexitet är ett mått på hur komplex koden är. Måttet visar på hur många beslutspunkter som finns i koden, där koden kan ta flera vägar, t ex en if-else-sats. För varje gång koden kan ta olika vägar ökar komplexiteten med 1. Den enklaste metoden har en komplexitet av 1, den returnerar endast en sak. En enkel metod med låg komplexitet är relativt enkel att testa, medan den blir betydligt svårare att testa om komplexiteten är hög. Det kommer krävas fler testfall, och leder alltså till mer jobb i form av test, men även felsökning/ ändring av koden. Den är även lättare att läsa. Man kan enkelt säga att rak kod som inte är intabbad har låg komplexitet, och det är det man strävar efter, det blir även ett lågt kodkomplexitetsvärde. Man bör ha ett komplexitetsvärde under 10. </p>

<p>Cohesion står för hur väl olika delar i en modul/ metod/ klass är kopplade till varandra. Man talar om att klasser och metoder enbart ska göra en sak, och cohesion är ett mått på hur väl det är uppfyllt. Det innebär en välstrukturerad och mindre rörig kod om de delar som hänger ihop faktiskt är samlade på ett ställe. Cohesion mäts med LCOM (Lack of Cohesive Methods) och ideala värdet för en klass är 1. Det innebär att klassen gör en sak. Högre värden innebär att klassen gör flera saker som inte hänger ihop, och det är inte önskvärt. </p>

<p>Coupling är ett mått på hur många kopplingar eller beroenden min klass har till andra klasser. Dels kan det finnas utgående beroenden (efferent coupling, Ce), dvs min klass använder andra klasser, och dels kan det finnas ingående beroenden (afferent coupling, Ca) då min klass används av andra klasser. Det man vill är att en klass ska vara löst kopplad till andra klasser och vara fristående. Den är då lättare att testa, och även att felsöka/ ändra, då den inte beror av andra klasser. Utgående (efferent) coupling mäts med hjälp av formeln Ce/(Ce + Ca), dvs utgående kopplingar i relation till totala antalet kopplingar. Värdet hamnar mellan 0 och 1, där 0 betyder stabil (inte många kopplingar till andra klasser) och 1 instabil (väldigt många kopplingar till andra klasser). Om man gör ändringar i en klass med många ingående kopplingar så kan det påverka många andra klasser. </p>

<p> Dessa fyra C ger alltså mått på kodkvaliteten. Det finns även flertalet andra mätvärden som kan användas som mått på kvaliteten på kod (t ex storlek på klasser, mått på hur mycket duplicerad kod man har etc) men denna rapport kommer främst koncentrera sig på den fyra C:na.</p>

<h2>Phpmetrics</h2>
Ett sätt att analysera kvaliteten på sin kod är att installera och använda verktyget phpmetrics lokalt och testa sin kod med hjälp av kommandot <span style="font-family:'Courier New', Courier, monospace">composer phpmetrics</span>. Verktyget ger dels en sammanfattande rapport i terminalen och dels en HTML-rapport, där man kan gå in och klicka på olika delar för mer detaljerade mätvärden.</br>

<figure>
    <div class = "pics">
    <a href = "{{ asset("img/quality_phpmetrics_terminal.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_phpmetrics_terminal.JPG") }}" alt = "Phpmetrics terminal report">

    <a href = "{{ asset("img/quality_phpmetrics_start.JPG") }}" ><img class = "metrics-pic wide-pic" src = "{{ asset("img/quality_phpmetrics_start.JPG") }}" alt = "Php metrics HTML report"></a> </a></br>
    </div>
        <figcaption>Rapporter från phpMetrics.</figcaption>
</figure>

<p> Från rapporten ser jag att jag har 1 violation på klassen CardController, som säger att den i teorin har 0,44 buggar. Det är dock bara en uppskattning som är gjord beroende på komplexiteten av klassen mm, och är enbart en varning.</p>

<figure>
    <a href = "{{ asset("img/phpmetrics_violations.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_violations.JPG") }}" alt = "Php metrics HTML report"></a>
    <figcaption>Class violation från phpMetrics.</figcaption>
</figure>

<p>Nedanstående bild visar en överblick över maintainability index. Färgen på cirklarna visar på hur lätt koden är att underhålla, och storleken visar på cyklomatiska komplexiteten. En stor röd cirkel är antagligen svår att underhålla. Hovrar man över cirklarna ser man vilka klasser det rör sig om, och vilka maintainability index de har. I den här bilden visas att klassen DiceHand är en halvstor röd cirkel (med ett maintainability index på 56), så den kan vara värd att kika lite extra på. Värdena ligger vanligtvis mellan 0-100, där under 65 räknas som kod svår att underhålla.</p>

<figure>
    <a href = "{{ asset("img/phpmetrics_maintainability.png") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_maintainability.png") }}" alt = "Php metrics HTML report"></a> 
    <figcaption>Maintainability index från phpMetrics.</figcaption>
</figure>

<p>Följande fyra bilder visar klassernas mått på Complexity, Cohesion och Coupling, samt även mått på klassernas storlek. </p>

<figure>
    <div class = "pics">
    <a href = "{{ asset("img/phpmetrics_complexity.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_complexity.JPG") }}" alt = "Php metrics HTML report"></a> 

    <a href = "{{ asset("img/phpmetrics_cohesive.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_cohesive.JPG") }}" alt = "Php metrics HTML report"></a>

    <a href = "{{ asset("img/phpmetrics_coupling.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_coupling.JPG") }}" alt = "Php metrics HTML report"></a>

    <a href = "{{ asset("img/phpmetrics_size.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/phpmetrics_size.JPG") }}"  alt = "Php metrics HTML report"></a> 
</div>
    <figcaption>Mätvärden från phpMetrics avseende Complexity, Cohesion, Coupling och Size. </figcaption>
</figure>

<p>Från mätvärdena ser man att komplexiteten för klasserna håller sig under tio, med undantag för en controller-klass. Man ser att controller-filerna har högst värden på utgående kopplingar, men det är inte så konstigt med tanke på vad de gör, och det ligger under 10 per klass. Värdet för Cohesion, LCOM, är 1-2, och det är låga värden man eftersträvar. En förbättring som man skulle kunna göra är att kika på de klasser som har värdet 2 och se om det går att förbättra. Man skulle även kunna se över de klasser med högst komplexitet. Storleken på klasserna håller sig under 100 rader kod, vilket inte känns för stort. Överlag är värdena bra, och jag ser inget akut som avviker eller som jag känner att jag måste justera, men det går alltid att förbättra lite överallt, och på det sättet ändå öka kvaliteten. </p>

<h2>Scrutinizer</h2>
<p>Ett annat sätt att testa kodkvalitet är att använda Scrutinizer, som är ett verktyg som kopplas ihop med ett GitHub-repo. Varje gång man pushar till det repot får man automatiskt en rapport för kodens kvalitet.</p>

<figure>
    <a href = "{{ asset("img/quality_scrutinizer_start.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_scrutinizer_start.JPG") }}"  alt = "Scrutinizer report"></a>
    <figcaption>Scrutinizer rapport.</figcaption>
</figure>
<p>De värden som Scrutinizer presenterar för kodkvaliteten syns i nedanstående bilder. Här ser man värden på storlek, komplexitet och kodtäckning för klasser och metoder. </p>
<figure>
    <div class="pics">
        <a href = "{{ asset("img/scrutinizer_data_before.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/scrutinizer_data_before.JPG") }}"  alt = "Scrutinizer report"></a>
        <a href = "{{ asset("img/change1.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/change1.JPG") }}" alt = "Scrutinizer report"></a>
    </div>
    <figcaption>Scrutinizer mätvärden för klasser (t v) och metoder (t h).</figcaption>
</figure>

<p>I rapporten för metoder syns att komplexiteten för metoden App\Game\Game::getMessage() är 6. Det är något som kan undersökas för att se om det skulle gå att minska.</p>

<p>Scrutinizer visar även på en del issues som kan finnas med koden. I rapporten kan man se följande:</p>
<figure>
    <div class = "pics">
        <a href = "{{ asset("img/quality_scrutinizer0.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_scrutinizer0.JPG") }}" alt = "Scrutinizer report"></a>
        <a href = "{{ asset("img/quality_scrutinizer1.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_scrutinizer1.JPG") }}" alt = "Scrutinizer report"></a>
        <a href = "{{ asset("img/quality_scrutinizer2.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_scrutinizer2.JPG") }}" alt = "Scrutinizer report"></a>
        <a href = "{{ asset("img/quality_scrutinizer3.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_scrutinizer3.JPG") }}" alt = "Scrutinizer report"></a>
    </div>
    <figcaption>Issues från Scrutinizer.</figcaption>
</figure>

<p>Rapporten ger höga värden på kodkvaliteten så det är inte enkelt att se vad man kan förbättra, men man skulle kunna kolla på storleken på metoden Controller\CardController::deal(). Den är i nuläget 27 rader och skulle eventuellt kunna delas upp i flera metoder. Eventuellt skulle man även kunna se över storleken på App\Controller\BookController och App\Controller\UserController som båda har äver 200 rader kod.</p> 
    
<p>Det finns även något som heter CRAP score, som jämför antal tester med komplexiteten på koden. Ju mer komplex kod desto fler tester kan man vilja göra. I detta fall är det Game::getMessage() som får det absolut sämsta värdet, och CardController::deal() därefter. Följande bild visar CRAP score för koden.</p>

<figure>
        <a href = "{{ asset("img/crap.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/crap.JPG") }}" alt = "Scrutinizer report"></a>
    <figcaption>Crap score från Scrutinizer.</figcaption>
</figure>

<h2>Förbättringar</h2>
<p>Genom att titta på första bilden från Scrutinizer ser man att test coverage inte var enablat. Detta beror på att en konfigurationsfil inte har blivit pushad till GitHub-repot. Det tänker jag göra så att korrekta mätvärden kan fås. Oklart om det kommer påverka mätvärdena, men om det saknas information borde måttet på kodkvaliteten bli lägre, det borde ge samma resultat som om koden inte är testad.</p>

<p>För att förbättra kvaliteten ytterligare i koden väljer jag att titta på de issues som finns i rapporten för Scrutinizer, för att se om det är några jag kan försöka lösa där. Det känns som en "enkel" sak att göra i och med att man får direkta förslag på var i koden problemet ligger, och vad de anser kan förbättra den. I detta fall är det filerna BookController.php och UserController.php som fått kommentarerna att parametern <span style="font-family:'Courier New', Courier, monospace"> $request </span>inte används och kan tas bort, samt filen CardController.php som fått kommentaren <span style="font-family:'Courier New', Courier, monospace">It seems like $drawn[0] can also be of type null; however, parameter $card of App\Card\CardHand::addCard() does only seem to accept App\Card\Card, maybe add an additional type check?</span> Eftersom det totala värdet var ganska bra från början så tror jag inte dessa ändringar kommer ge jättestor effekt, men det återstår att se.</p>

<p>Jag väljer även att titta på om det går att minska komplexiteten för metoden App\Game\Game::getMessage() för att se om jag kan få ner det värdet. Det borde inte ge effekt på den totala kodkvaliteten, eftersom den redan är 10,0 men intressant att se hur man kan jobba själv för att minska komplexiteten på en metod, och förhoppningsvis minska det värdet.</p>

<p>Jag försöker också minska CRAP score på metoden Game::getMessage() genom att införa något extra test.</p>

<span style="background-color: #FFFF00">
Implementera förbättringarna.</br></br>
Notera de nya mätvärdena.</br></br>
Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.</span>



<p>Genom att se till att konfigurationsfilen blev pushad till GitHub-repot så kan man direkt se att det gav effekt på kodkvalieten. Värdet ökade från 9,93 till 10,0.</p>
<figure>
    <a href = "{{ asset("img/quality_phpmetrics_start_new.JPG") }}" ><img class = "metrics-pic" src = "{{ asset("img/quality_phpmetrics_start_new.JPG") }}" alt = "Scrutinizer report"></a>
    <figcaption>Rapport från Scrutinizer efter tillagd konfigurationsfil.</figcaption>
</figure>

<p>När det gäller de issues som fanns gick den enkelt att endast ta bort $request, då det var kod som inte behövdes.</p>

<p>Det gick att minska komplexiteten på metoden App\Game\Game::getMessage() genom att dela upp den i två metoder. Första delen avser egentligen en poängräkning, och kan göras separat från att hämta meddelande. </p>


<h2>Diskussion</h2>

<p>Genom att arbeta igenom de förslag och svagheter som nämns som problem i koden kan man alltså förbättra kvaliteten på ett enkelt sätt. </p>

<span style="background-color: #FFFF00">Diskutera kort kring det du nyss gjort. </br></span>

</p>För t ex metoden App\Game\Game::getMessage() så var det väldigt tydligt att se vad komplexiteten var, och därmed enkelt att sätta igång och försöka förbättra mätvärdet och kvaliteten på koden. Verktygen ger en tydlig överblick över hur det ser ut, och är därför smidiga att använda som hjälp för att få högkvalitativ kod. När man pushar sin kod till GitHub och gör helhetspoängen, och att man lätt kan se vad den tidigare poängen var, att man lätt kan se om man är på väg åt rätt håll då man uppdaterar sin kod, och det blir även roligt att försöka tävla med sig själv i att få till en bra kod.</p>

{% endblock %}