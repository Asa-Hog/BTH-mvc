Kmom03 - Applikation
-------------------------

Det kändes bra att modellera ett kortspel med flödesdiagram och pseudokod. Flödesdiagrammet kändes enklast, för då fick jag tänka steg för steg vad som skulle hända i spelet. Pseudokoden var lite svårare för då behövde jag veta mer detaljer hur jag skulle lösa saker, som jag kanske inte funderat ut ännu. Flödesdiagrammet var till hjälp för mig när jag skulle bygga applikationen. Jag trodde först spelet skulle vara mycket svårare att göra, men när jag hade diagrammet att titta på såg jag att det bara var att följa det, så hade jag hela strukturen klar.

Det var kul att sätta igång med implementeringen av uppgiften när jag redan var förberedd och hade funderat igenom hur det skulle gå till. I många andra fall börjar jag koda först, och sen på slutet märker jag hur allt blev, och det kan bli lite rörigt om (när) jag fastnar på något, om jag inte har en plan för hur jag ska göra. Jag följde flödesdiagrammet när jag satte igång denna gång och är relativt nöjd med koden i uppgiften. Jag tyckte att det var väldigt smidigt att jobba med klasser och objekt i den här uppgiften. Jag funderar på om jag skulle göra min controller-fil ännu mindre, eller om den storlek jag har är okej. Det går att flytta ut ännu mer kod till klasser, men jag tyckte ändå jag hade den på lagom nivå. Mina klasser skulle kunna bli ännu lite bättre om jag ändrade på vissa saker, men om jag gör det i det här läget kommer min kod för tidigare kursmoment sluta fungera, så jag valde att arbeta vidare på den kod jag hade i stället. Jag gjorde en enkel variant av spelet och designen, men nöjde mig med det enligt KISS (Keep it simple stupid).

Jag tycker fortfarande det är svårare att koda i Symfony än jag upplevt tidigare. Det är många enkla saker som inte fungerar, eller som tar tid att förstå hur de fungerar, och hur man ska skriva. T ex tog det kanske 30-60 min för mig att få en counter att fungera, vilket kanske går på några sekunder annars.

I detta kursmoment har jag lärt mig en del om att skriva snygg kod, t ex att varje klass enbart ska ha ett ansvarsområde, och att man ska använda dependency injection och skicka in ett beroende, i stället för att skapa det i en klass, och flera andra saker som det är bra att tänka på. Det är bra att ha det i bakhuvudet framöver. Koden blir också enklare att läsa för mig själv om den är tydlig. Även om jag skrivit något själv kan det ta ett tag för mig att komma ihåg vad jag egentligen gjorde i vissa fall då jag t ex har nästlade for-loopar, mycket intabbning och if- och else- delar i koden.